#include <bits/stdc++.h>
#include "../aoc.h"

using namespace std;
vector<string> flip(vector<string> f){
	vector<string> r;
	for(int i = 0; i < f[0].size(); i++){
		r.push_back("");
		for(auto const& c : f){
			r[r.size()-1] += c[i];
		}
	}
	return r;

}
bool trymirror(string c, int i){
	int c1 = c.substr(i);
	int c2 = c.substr(0,i);
	int d1 = c.substr(i);
	int d2 = c.substr(0, i);
	reverse(c2.begin(), c2.end());
	reverse(d1.begin(), d1.end());
	return c1.find(c2) == 0 && d2.find(d1) == 0;
}
int main(int argc, char* argv[]){
	vector<string> lines = getlines(argv[1]);
	vector<vector<string>> exm; 
	vector<string> e;
	exm.push_back(e);
	for(const auto& line: lines){
		if(line.size() == 0){
			vector<string> e;
			exm.push_back(e);
		}			
		exm[exm.size()-1].push_back(line);
	}
	for(const auto& e: exm){
		for(int i = 1; i < e[0].size(); i++){
			bool ok = true;
			for(const auto& l: e){
				ok = ok && trymirror(l, i);	
			}
			if(ok){
				cout<<i<<endl;
			}
		}
		vector<string> f = flip(e);
		for(int i = 1; i < f[0].size(); i++){
			bool ok = true;
			for(const auto& l: f){
				ok = ok && trymirror(l, i);	
			}
			if(ok){
				cout<<i<<endl;
			}
		};
	}
	return 0;
}
